  - name: Install pgaudit Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
        - percona-postgresql-13-pgaudit
        - percona-postgresql-13-pgaudit-dbgsym
    when: ansible_os_family == "Debian"

  - name: Install pgaudit RHEL
    yum:
      name: percona-pgaudit
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"

  - name: Install pgbackrest Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
        - percona-pgbackrest
        - percona-pgbackrest-doc
        - percona-pgbackrest-dbgsym
    when: ansible_os_family == "Debian"

  - name: Install pgbackrest RHEL
    yum:
      name: percona-pgbackrest
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"

  - name: Create pgbackrest directory
    file:
      path: /etc/pgbackrest/
      state: directory


  - name: Create pgbackrest configuration Debian
    blockinfile:
      path: /etc/pgbackrest/pgbackrest.conf
      create: yes
      block: |
        [global]
        repo1-path=/var/lib/pgbackrest

        [testing]
        pg1-path=/var/lib/postgresql/13/main
        pg1-port=5432
    when: ansible_os_family == "Debian"

  - name: Create pgbackrest configuration RHEL
    blockinfile:
      path: /etc/pgbackrest/pgbackrest.conf
      create: yes
      block: |
        [global]
        repo1-path=/var/lib/pgbackrest

        [testing]
        pg1-path=/var/lib/pgsql/13/data
        pg1-port=5432
    when: ansible_os_family == "RedHat"


  - name: Configure backup config for Debian
    blockinfile:
      path: /etc/postgresql/13/main/postgresql.conf
      block: |
        archive_mode = on
        archive_command = 'pgbackrest --stanza=testing archive-push %p'
        max_wal_senders = 3
        wal_level = replica
    when: ansible_os_family == "Debian"

  - name: Configure backup config for RHEL
    blockinfile:
      path: /var/lib/pgsql/13/data/postgresql.conf
      block: |
        archive_mode = on
        archive_command = 'pgbackrest --stanza=testing archive-push %p'
        max_wal_senders = 3
        wal_level = replica
    when: ansible_os_family == "RedHat"

  - name: Restart Postgres RHEL
    service:
      name: postgresql-13
      state: restarted
    when: ansible_os_family == "RedHat"

  - name: Retart Postgres Debian
    command: sudo systemctl restart postgresql
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_os_family == "Debian"

  - name: Install pgrepack Debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
        - percona-postgresql-13-repack
        - percona-postgresql-13-repack-dbgsym
    when: ansible_os_family == "Debian"

  - name: Install pgrepack RHEL
    yum:
      name: percona-pg_repack13
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"


  - name: Install patroni RPM
    yum:
      name: percona-patroni
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"

  - name: Install patroni debian
    apt:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
        - percona-patroni
        - percona-patroni-doc
    when: ansible_os_family == "Debian"

#  - name: Install pg-stat-monitor RHEL
#    yum:
#      name: "{{ packages }}"
#      state: latest
#      update_cache: yes
#    vars:
#      packages:
#        - percona-pg-stat-monitor13
#        - percona-pg-stat-monitor13-debuginfo
#    when: ansible_os_family == "RedHat"
#
#  - name: Install pg-stat-monitor debian
#    apt:
#      name: "{{ packages }}"
#      state: latest
#      update_cache: yes
#    vars:
#      packages:
#        - percona-pg-stat-monitor13
#        - percona-pg-stat-monitor13-dbgsym
#    when: ansible_os_family == "Debian"

#  - name: Add extensions to postgresql.conf for Debian
#    lineinfile:
#      path: /etc/postgresql/13/main/postgresql.conf
#      line: shared_preload_libraries = 'pg_stat_monitor, pgaudit'
#    when: ansible_os_family == "Debian"
#
#  - name: Add extensions to postgresql.conf for RHEL
#    lineinfile:
#      path: /var/lib/pgsql/13/data/postgresql.conf
#      line: shared_preload_libraries = 'pg_stat_monitor, pgaudit'
#    when: ansible_os_family == "RedHat"

# Comment it enabled lines before with pg_stat
  - name: Add extensions to postgresql.conf for Debian
    lineinfile:
      path: /etc/postgresql/13/main/postgresql.conf
      line: shared_preload_libraries = 'pgaudit'
    when: ansible_os_family == "Debian"

  - name: Add extensions to postgresql.conf for RHEL
    lineinfile:
      path: /var/lib/pgsql/13/data/postgresql.conf
      line: shared_preload_libraries = 'pgaudit'
    when: ansible_os_family == "RedHat"

  - name: Restart Postgres RHEL
    service:
      name: postgresql-13
      state: restarted
    when: ansible_os_family == "RedHat"
    register: out

  - name: Retart Postgres Debian
    command: sudo systemctl restart postgresql
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_os_family == "Debian"
